{"ast":null,"code":"var _jsxFileName = \"D:\\\\kahoot-clone\\\\kahoot\\\\src\\\\pages\\\\LeaderboardPage.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n\n// Timer Hook\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useTimer = seconds => {\n  _s();\n  const [time, setTime] = useState(seconds);\n  useEffect(() => {\n    if (time === 0) return;\n    const timer = setInterval(() => {\n      setTime(prevTime => prevTime - 1);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [time]);\n  return time;\n};\n\n// Leaderboard Component\n_s(useTimer, \"Ivq9ET2PTBb/UJK8fIQIUojP4Oo=\");\nconst Leaderboard = ({\n  players\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Leaderboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: players.slice(0, 5).map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [player.name, \": \", player.score, \" points\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n// Question Component\n_c = Leaderboard;\nconst Question = ({\n  question,\n  onNextQuestion\n}) => {\n  _s2();\n  const timeRemaining = useTimer(7); // 7 second timer\n\n  useEffect(() => {\n    if (timeRemaining === 0) {\n      onNextQuestion();\n    }\n  }, [timeRemaining, onNextQuestion]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: question.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: question.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time remaining: \", timeRemaining, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n// Final Results Component\n_s2(Question, \"Kg/OLCgM9l1DgT0drVp353xENWw=\", false, function () {\n  return [useTimer];\n});\n_c2 = Question;\nconst FinalResults = ({\n  players\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Final Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: players.map((player, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [player.name, \": \", player.score, \" points\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n// App Component\n_c3 = FinalResults;\nconst App = () => {\n  _s3();\n  const [players, setPlayers] = useState([{\n    name: 'Player 1',\n    score: 0\n  }, {\n    name: 'Player 2',\n    score: 0\n  }, {\n    name: 'Player 3',\n    score: 0\n  }]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [questions, setQuestions] = useState([{\n    text: 'What is 2 + 2?',\n    options: ['3', '4', '5', '6'],\n    correctAnswer: '4'\n  }, {\n    text: 'What is the capital of France?',\n    options: ['Berlin', 'Madrid', 'Paris', 'Rome'],\n    correctAnswer: 'Paris'\n  }]);\n  const handleNextQuestion = () => {\n    setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n  };\n  const handleAnswer = (playerIndex, selectedAnswer) => {\n    const updatedPlayers = [...players];\n    if (selectedAnswer === questions[currentQuestionIndex].correctAnswer) {\n      updatedPlayers[playerIndex].score += 10; // add points for correct answer\n    }\n    setPlayers(updatedPlayers);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: currentQuestionIndex < questions.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Leaderboard, {\n        players: players\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Question, {\n        question: questions[currentQuestionIndex],\n        onNextQuestion: handleNextQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(FinalResults, {\n      players: players\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s3(App, \"jYoLAdrP2b1mWKj/SSiE+JyJ9tU=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Leaderboard\");\n$RefreshReg$(_c2, \"Question\");\n$RefreshReg$(_c3, \"FinalResults\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","useTimer","seconds","_s","time","setTime","timer","setInterval","prevTime","clearInterval","Leaderboard","players","children","fileName","_jsxFileName","lineNumber","columnNumber","slice","map","player","index","name","score","_c","Question","question","onNextQuestion","_s2","timeRemaining","text","options","option","_c2","FinalResults","_c3","App","_s3","setPlayers","currentQuestionIndex","setCurrentQuestionIndex","questions","setQuestions","correctAnswer","handleNextQuestion","prevIndex","handleAnswer","playerIndex","selectedAnswer","updatedPlayers","length","_c4","$RefreshReg$"],"sources":["D:/kahoot-clone/kahoot/src/pages/LeaderboardPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n// Timer Hook\r\nconst useTimer = (seconds) => {\r\n  const [time, setTime] = useState(seconds);\r\n  \r\n  useEffect(() => {\r\n    if (time === 0) return;\r\n    const timer = setInterval(() => {\r\n      setTime((prevTime) => prevTime - 1);\r\n    }, 1000);\r\n    \r\n    return () => clearInterval(timer);\r\n  }, [time]);\r\n\r\n  return time;\r\n};\r\n\r\n// Leaderboard Component\r\nconst Leaderboard = ({ players }) => {\r\n  return (\r\n    <div>\r\n      <h2>Leaderboard</h2>\r\n      <ol>\r\n        {players.slice(0, 5).map((player, index) => (\r\n          <li key={index}>\r\n            {player.name}: {player.score} points\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Question Component\r\nconst Question = ({ question, onNextQuestion }) => {\r\n  const timeRemaining = useTimer(7); // 7 second timer\r\n\r\n  useEffect(() => {\r\n    if (timeRemaining === 0) {\r\n      onNextQuestion();\r\n    }\r\n  }, [timeRemaining, onNextQuestion]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>{question.text}</h2>\r\n      <ul>\r\n        {question.options.map((option, index) => (\r\n          <li key={index}>{option}</li>\r\n        ))}\r\n      </ul>\r\n      <p>Time remaining: {timeRemaining}s</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Final Results Component\r\nconst FinalResults = ({ players }) => {\r\n  return (\r\n    <div>\r\n      <h2>Final Results</h2>\r\n      <ul>\r\n        {players.map((player, index) => (\r\n          <li key={index}>\r\n            {player.name}: {player.score} points\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\n// App Component\r\nconst App = () => {\r\n  const [players, setPlayers] = useState([\r\n    { name: 'Player 1', score: 0 },\r\n    { name: 'Player 2', score: 0 },\r\n    { name: 'Player 3', score: 0 },\r\n  ]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [questions, setQuestions] = useState([\r\n    {\r\n      text: 'What is 2 + 2?',\r\n      options: ['3', '4', '5', '6'],\r\n      correctAnswer: '4',\r\n    },\r\n    {\r\n      text: 'What is the capital of France?',\r\n      options: ['Berlin', 'Madrid', 'Paris', 'Rome'],\r\n      correctAnswer: 'Paris',\r\n    },\r\n  ]);\r\n\r\n  const handleNextQuestion = () => {\r\n    setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n  };\r\n\r\n  const handleAnswer = (playerIndex, selectedAnswer) => {\r\n    const updatedPlayers = [...players];\r\n    if (selectedAnswer === questions[currentQuestionIndex].correctAnswer) {\r\n      updatedPlayers[playerIndex].score += 10; // add points for correct answer\r\n    }\r\n    setPlayers(updatedPlayers);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {currentQuestionIndex < questions.length ? (\r\n        <>\r\n          <Leaderboard players={players} />\r\n          <Question\r\n            question={questions[currentQuestionIndex]}\r\n            onNextQuestion={handleNextQuestion}\r\n          />\r\n        </>\r\n      ) : (\r\n        <FinalResults players={players} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}